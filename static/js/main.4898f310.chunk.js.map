{"version":3,"sources":["Select.js","Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Select","_ref","fetchData","cities","React","createElement","Form","aria-label","onChange","e","target","value","map","city","key","name","Weather","weatherData","Fragment","cityName","weatherCondition","weather","main","weatherDescription","description","temperature","temp","weatherImg","concat","icon","Card","Body","Title","ListGroup","variant","Item","Image","src","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","App","_useState","useState","_useState2","_slicedToArray","setWeatherData","_useState3","_useState4","promWeatherDataArray","setPromWeatherDataArray","_useState5","_useState6","forWeatherDataArray","setForWeatherDataArray","url","Container","fluid","className","Row","Col","xs","fetch","response","json","data","Button","onClick","promArray","all","resultsArray","PromiseAll","cityData","index","_asyncToGenerator","_callee","_context","current","_toConsumableArray","_x","apply","arguments","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4898f310.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\n\nfunction Select({ fetchData, cities }) {\n  return (\n    <Form.Select\n      aria-label=\"select city\"\n      onChange={(e) => {\n        fetchData(e.target.value);\n      }}\n    >\n      {cities.map((city) => (\n        <option value={city.value} key={city.value}>\n          {city.name}\n        </option>\n      ))}\n    </Form.Select>\n  );\n}\n\nexport default Select;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Image from 'react-bootstrap/Image';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nfunction Weather({ weatherData }) {\n  if (!weatherData) return <></>;\n\n  const cityName = weatherData ? weatherData.name : '';\n\n  const weatherCondition = weatherData.weather\n    ? weatherData.weather[0].main\n    : '';\n  const weatherDescription = weatherData.weather\n    ? weatherData.weather[0].description\n    : '';\n  const temperature = weatherData.main ? weatherData.main.temp : '';\n  const weatherImg = weatherData.weather\n    ? `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`\n    : '';\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Meteo di {cityName}</Card.Title>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item>\n            {' '}\n            <Image src={weatherImg} />\n            {weatherCondition}\n          </ListGroup.Item>\n          <ListGroup.Item>Current weather: {weatherDescription}</ListGroup.Item>\n          <ListGroup.Item>Temperature: {temperature}°C</ListGroup.Item>\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default Weather;\n","import React, { useState } from 'react';\nimport Select from './Select';\nimport Weather from './Weather';\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst cities = [\n  { name: 'Milano', value: 'milano' },\n  { name: 'Roma', value: 'roma' },\n  { name: 'Bologna', value: 'bologna' },\n  { name: 'Palermo', value: 'palermo' },\n  { name: 'Napoli', value: 'napoli' },\n  { name: 'Torino', value: 'torino' },\n  { name: 'Firenze', value: 'firenze' },\n];\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState('');\n  const [promWeatherDataArray, setPromWeatherDataArray] = useState([]);\n  const [forWeatherDataArray, setForWeatherDataArray] = useState([]);\n\n  const url = (city) => {\n    // const apiKey = ' ';\n    const apiKey = '5145e61cb6c1fadbaa10f1c92ee23575';\n    return `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;\n  };\n\n  function fetchCity(city) {\n    fetch(url(city))\n      .then((response) => response.json())\n      .then((data) => {\n        setWeatherData(data);\n      });\n  }\n\n  function PromiseAll(cities) {\n    const promArray = [];\n    cities.forEach((city) => {\n      promArray.push(\n        fetch(url(city.value)).then((response) => response.json())\n      );\n    });\n\n    Promise.all(promArray).then((resultsArray) => {\n      setPromWeatherDataArray(resultsArray);\n    });\n  }\n\n  function fetchForEach(cities) {\n    cities.forEach(async (city) => {\n      const data = await fetch(url(city.value)).then((response) =>\n        response.json()\n      );\n      setForWeatherDataArray((current) => [...current, data]);\n    });\n  }\n\n  return (\n    <Container fluid className=\"animated-gradient\">\n      <h1 className=\"title text-center\">IWWA</h1>\n      <h2 className=\"title text-center\">Italian Worst Weather App</h2>\n      <Row>\n        <Col xs={3}></Col>\n        <Col xs={6}>\n          {' '}\n          <Form>\n            {' '}\n            <Select fetchData={fetchCity} cities={cities} />\n          </Form>\n        </Col>\n      </Row>\n      <br />\n      <Row>\n        <Col xs={4}></Col>\n        <Col xs={4}>\n          <Weather weatherData={weatherData} />\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={3}></Col>\n        <Col>\n          <h3 className=\"title mt-3\">Display Cities using Promise.all</h3>\n          <Button\n            variant=\"primary\"\n            className=\"mt-1 mb-3\"\n            onClick={() => PromiseAll(cities)}\n          >\n            Display all #1\n          </Button>{' '}\n        </Col>\n      </Row>{' '}\n      <Row>\n        {promWeatherDataArray.map((cityData, index) => (\n          <Col key={index}>\n            <Weather weatherData={cityData} />\n          </Col>\n        ))}\n      </Row>\n      <Row>\n        <Col xs={3}></Col>\n        <Col>\n          <h3 className=\"title mt-3\">Display Cities one by one</h3>\n          <Button\n            variant=\"primary\"\n            className=\"mt-1 mb-3\"\n            onClick={() => fetchForEach(cities)}\n          >\n            Display all #2\n          </Button>{' '}\n        </Col>\n      </Row>\n      <Row>\n        {forWeatherDataArray.map((cityData, index) => (\n          <Col key={index}>\n            <Weather weatherData={cityData} />\n          </Col>\n        ))}\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}