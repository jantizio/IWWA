{"version":3,"sources":["Select.js","Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Select","props","_useState","useState","_useState2","_slicedToArray","selectedCity","setSelectedCity","setWeatherData","url","concat","useEffect","ignore","fetch","then","response","json","data","React","createElement","Form","aria-label","value","onChange","e","target","Weather","weatherData","console","log","cityName","name","weatherCondition","weather","main","weatherDescription","description","temperature","temp","weatherImg","icon","Card","Body","Title","ListGroup","variant","Item","Image","src","App","Container","fluid","className","Row","Col","xs","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c0e8e74b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nfunction Select(props) {\r\n  const [selectedCity, setSelectedCity] = useState('Milano');\r\n  const { setWeatherData } = props;\r\n\r\n  const apiKey = '5145e61cb6c1fadbaa10f1c92ee23575';\r\n  const url = `https://api.openweathermap.org/data/2.5/weather?q=${selectedCity}&units=metric&appid=${apiKey}`;\r\n\r\n  useEffect(() => {\r\n    let ignore = false;\r\n    setWeatherData('');\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (!ignore) {\r\n          setWeatherData(data);\r\n        }\r\n      });\r\n    return () => {\r\n      ignore = true;\r\n    };\r\n  }, [setWeatherData, url]);\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"select city\"\r\n      value={selectedCity}\r\n      onChange={(e) => {\r\n        setSelectedCity(e.target.value);\r\n      }}\r\n    >\r\n      <option value=\"Milano\">Milano</option>\r\n      <option value=\"Roma\">Roma</option>\r\n      <option value=\"Bologna\">Bologna</option>\r\n      <option value=\"Palermo\">Palermo</option>\r\n      <option value=\"Napoli\">Napoli</option>\r\n      <option value=\"Torino\">Torino</option>\r\n      <option value=\"Firenze\">Firenze</option>\r\n    </Form.Select>\r\n  );\r\n}\r\n\r\nexport default Select;\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Image from 'react-bootstrap/Image';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nfunction Weather(props) {\r\n  const { weatherData } = props;\r\n  console.log('dentro weather component ', weatherData);\r\n\r\n  const cityName = weatherData.name;\r\n\r\n  const weatherCondition = weatherData.weather\r\n    ? weatherData.weather[0].main\r\n    : '';\r\n  const weatherDescription = weatherData.weather\r\n    ? weatherData.weather[0].description\r\n    : '';\r\n  const temperature = weatherData.main ? weatherData.main.temp : '';\r\n  const weatherImg = weatherData.weather\r\n    ? `https://openweathermap.org/img/w/${weatherData.weather[0].icon}.png`\r\n    : '';\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Body>\r\n        <Card.Title>Meteo di {cityName}</Card.Title>\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item>\r\n            {' '}\r\n            <Image src={weatherImg} />\r\n            {weatherCondition}\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>Current weather: {weatherDescription}</ListGroup.Item>\r\n          <ListGroup.Item>Temperature: {temperature}Â°C</ListGroup.Item>\r\n        </ListGroup>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useState } from 'react';\r\nimport Select from './Select';\r\nimport Weather from './Weather';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  const [weatherData, setWeatherData] = useState('');\r\n\r\n  console.log('dati ', weatherData);\r\n\r\n  return (\r\n    <Container fluid className=\"animated-gradient\">\r\n      <h1 className=\"title text-center\">IWWA</h1>\r\n      <h2 className=\"title text-center\">Italian Worst Weather App</h2>\r\n      <Row>\r\n        <Col xs={3}></Col>\r\n        <Col xs={6}>\r\n          {' '}\r\n          <Form>\r\n            {' '}\r\n            <Select setWeatherData={setWeatherData} />\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <Col xs={4}></Col>\r\n        <Col xs={4}>\r\n          <Weather weatherData={weatherData} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}